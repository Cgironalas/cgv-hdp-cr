const char* bump_map_glfs ="\
#version 150 compatibility\n\
\n\
uniform sampler2D bump_map;\n\
uniform int bump_map_res;\n\
uniform float bump_scale;\n\
\n\
vec3 bump_map_normal(vec3 s, vec2 tc, vec3 N)\n\
{\n\
\t\tfloat h_0 = texture2D(bump_map,tc).x;\n\
\n\
\t\tmat2 tc_i = mat2(dFdx(tc),dFdy(tc));\n\
\tvec2 h_i  = vec2(texture2D(bump_map,tc+tc_i[0]).x - h_0,\n\
\t\t             texture2D(bump_map,tc+tc_i[1]).x - h_0);\n\
\tvec3 s_x = dFdx(s);\n\
\tvec3 s_y = dFdy(s);\n\
\n\
\t\tfloat det_tc_i = tc_i[0][0]*tc_i[1][1] - tc_i[1][0]*tc_i[0][1];\n\
\tmat2  i_tc     = mat2(tc_i[1][1], -tc_i[1][0], \n\
\t\t                 -tc_i[0][1], tc_i[0][0])/det_tc_i;\n\
\n\
\t\tvec2 h_tc   = i_tc*h_i;\n\
\tvec2 s_tc0  = i_tc * vec2(s_x[0],s_y[0]);\n\
\tvec2 s_tc1  = i_tc * vec2(s_x[1],s_y[1]);\n\
\tvec2 s_tc2  = i_tc * vec2(s_x[2],s_y[2]);\n\
\tvec3 s_u  = vec3(s_tc0.x,s_tc1.x,s_tc2.x);\n\
\tvec3 s_v  = vec3(s_tc0.y,s_tc1.y,s_tc2.y);\n\
\n\
\t\tfloat f = length(cross(s_u,s_v));\n\
\n\
\t\tvec3 n = normalize(N);\n\
\tfloat height_scale = bump_scale / float(bump_map_res);\n\
\tn = f*n + cross(height_scale*(h_tc[1]*s_u-h_tc[0]*s_v),n);\n\
\treturn normalize(n);\n\
}";
