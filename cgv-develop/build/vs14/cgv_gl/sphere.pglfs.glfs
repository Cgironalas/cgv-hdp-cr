
varying vec3 q_tilde;
varying vec3 inv_T_square_v;
varying vec3 inv_T_square_e_c;
varying vec4 ev_clip;

varying vec3 h0;
varying vec3 l0;

varying vec3 h1;
varying vec3 l1;

varying vec3 h2;
varying vec3 l2;

varying vec3 h3;
varying vec3 l3;

varying vec4 a;
varying vec4 d;
varying vec4 s;

void main()
{
	float q_tilde_squared_length = dot(q_tilde.xy,q_tilde.xy);
	if (q_tilde_squared_length > 1.0)
		discard;
	float lambda = 1.0/(1.0+q_tilde.z*sqrt(1.0-q_tilde_squared_length));
	vec3 n = inv_T_square_e_c + lambda * inv_T_square_v;

	gl_FragColor = a;
	float ldotn;
    
		ldotn = dot(n,l0);
		if (ldotn > 0.0) {
			gl_FragColor += 
				ldotn*gl_LightSource[0].diffuse*d+
				pow(max(dot(n,normalize(h0)), 0.0), gl_FrontMaterial.shininess)*
				s*gl_LightSource[0].specular;
		}
	
		ldotn = dot(n,l1);
		if (ldotn > 0.0) {
			gl_FragColor += 
				ldotn*gl_LightSource[1].diffuse*d+
				pow(max(dot(n,normalize(h1)), 0.0), gl_FrontMaterial.shininess)*
				s*gl_LightSource[1].specular;
		}
	
		ldotn = dot(n,l2);
		if (ldotn > 0.0) {
			gl_FragColor += 
				ldotn*gl_LightSource[2].diffuse*d+
				pow(max(dot(n,normalize(h2)), 0.0), gl_FrontMaterial.shininess)*
				s*gl_LightSource[2].specular;
		}
	
		ldotn = dot(n,l3);
		if (ldotn > 0.0) {
			gl_FragColor += 
				ldotn*gl_LightSource[3].diffuse*d+
				pow(max(dot(n,normalize(h3)), 0.0), gl_FrontMaterial.shininess)*
				s*gl_LightSource[3].specular;
		}
	
}